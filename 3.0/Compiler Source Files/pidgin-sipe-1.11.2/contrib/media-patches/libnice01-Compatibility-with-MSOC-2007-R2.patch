From 7407ce74e1edd7fe3056d6ea0158462d82623488 Mon Sep 17 00:00:00 2001
From: Jakub Adam <jakub.adam@ktknet.cz>
Date: Thu, 30 Sep 2010 22:46:51 +0200
Subject: [PATCH 1/3] Compatibility with MSOC 2007 R2

---
 agent/agent.c      |    9 +++++++++
 agent/agent.h      |    4 +++-
 agent/conncheck.c  |   13 +++++++++----
 stun/stunmessage.h |    6 +++++-
 stun/usages/ice.c  |   29 +++++++++++++++++++++++++++--
 stun/usages/ice.h  |   10 +++++++++-
 6 files changed, 62 insertions(+), 9 deletions(-)

diff --git a/agent/agent.c b/agent/agent.c
index 0ecf008..6f5db62 100644
--- a/agent/agent.c
+++ b/agent/agent.c
@@ -149,6 +149,10 @@ agent_to_ice_compatibility (NiceAgent *agent)
       STUN_USAGE_ICE_COMPATIBILITY_GOOGLE :
       agent->compatibility == NICE_COMPATIBILITY_MSN ?
       STUN_USAGE_ICE_COMPATIBILITY_MSN :
+      agent->compatibility == NICE_COMPATIBILITY_WLM2009 ?
+      STUN_USAGE_ICE_COMPATIBILITY_WLM2009 :
+      agent->compatibility == NICE_COMPATIBILITY_OC2007R2 ?
+      STUN_USAGE_ICE_COMPATIBILITY_WLM2009 :
       STUN_USAGE_ICE_COMPATIBILITY_RFC5245;
 }
 
@@ -840,6 +844,11 @@ nice_agent_set_property (
             STUN_COMPATIBILITY_WLM2009,
             STUN_AGENT_USAGE_SHORT_TERM_CREDENTIALS |
             STUN_AGENT_USAGE_USE_FINGERPRINT);
+      } else if (agent->compatibility == NICE_COMPATIBILITY_OC2007R2) {
+        stun_agent_init (&agent->stun_agent, STUN_ALL_KNOWN_ATTRIBUTES,
+            STUN_COMPATIBILITY_WLM2009,
+            STUN_AGENT_USAGE_SHORT_TERM_CREDENTIALS |
+            STUN_AGENT_USAGE_USE_FINGERPRINT);
       } else {
         stun_agent_init (&agent->stun_agent, STUN_ALL_KNOWN_ATTRIBUTES,
             STUN_COMPATIBILITY_RFC5389,
diff --git a/agent/agent.h b/agent/agent.h
index 95148b6..2f80695 100644
--- a/agent/agent.h
+++ b/agent/agent.h
@@ -213,6 +213,7 @@ typedef enum
  * @NICE_COMPATIBILITY_MSN: Use compatibility for MSN Messenger specs
  * @NICE_COMPATIBILITY_WLM2009: Use compatibility with Windows Live Messenger
  * 2009
+ * @NICE_COMPATIBILITY_OC2007R2: Use compatibility with Microsoft Office Communicator 2007 R2
  * @NICE_COMPATIBILITY_DRAFT19: Use compatibility for ICE Draft 19 specs
  * @NICE_COMPATIBILITY_LAST: Dummy last compatibility mode
  *
@@ -229,8 +230,9 @@ typedef enum
   NICE_COMPATIBILITY_GOOGLE,
   NICE_COMPATIBILITY_MSN,
   NICE_COMPATIBILITY_WLM2009,
+  NICE_COMPATIBILITY_OC2007R2,
   NICE_COMPATIBILITY_DRAFT19 = NICE_COMPATIBILITY_RFC5245,
-  NICE_COMPATIBILITY_LAST = NICE_COMPATIBILITY_WLM2009,
+  NICE_COMPATIBILITY_LAST = NICE_COMPATIBILITY_OC2007R2,
 } NiceCompatibility;
 
 /**
diff --git a/agent/conncheck.c b/agent/conncheck.c
index 49dec80..e81d45e 100644
--- a/agent/conncheck.c
+++ b/agent/conncheck.c
@@ -599,6 +599,7 @@ static gboolean priv_conn_keepalive_tick_unlocked (NiceAgent *agent)
                 uname, uname_len, password, password_len,
                 agent->controlling_mode, agent->controlling_mode, priority,
                 agent->tie_breaker,
+                NULL,
                 agent_to_ice_compatibility (agent));
 
             nice_debug ("Agent %p: conncheck created %d - %p",
@@ -1312,7 +1313,8 @@ int conn_check_add_for_candidate (NiceAgent *agent, guint stream_id, Component *
       /* note: do not create pairs where local candidate is 
        *       a srv-reflexive (ICE 5.7.3. "Pruning the Pairs" ID-19) */
       if ((agent->compatibility == NICE_COMPATIBILITY_RFC5245 ||
-              agent->compatibility == NICE_COMPATIBILITY_WLM2009) &&
+           agent->compatibility == NICE_COMPATIBILITY_WLM2009 ||
+           agent->compatibility == NICE_COMPATIBILITY_OC2007R2) &&
           local->type == NICE_CANDIDATE_TYPE_SERVER_REFLEXIVE)
 	continue;
 
@@ -1432,7 +1434,8 @@ size_t priv_gen_username (NiceAgent *agent, guint component_id,
       len++;
       memcpy (dest + len, local, local_len);
       len += local_len;
-    } else if (agent->compatibility == NICE_COMPATIBILITY_WLM2009 &&
+    } else if ((agent->compatibility == NICE_COMPATIBILITY_WLM2009 ||
+        agent->compatibility == NICE_COMPATIBILITY_OC2007R2) &&
         dest_len >= remote_len + local_len + 4 ) {
       memcpy (dest, remote, remote_len);
       len += remote_len;
@@ -1633,6 +1636,7 @@ int conn_check_send (NiceAgent *agent, CandidateCheckPair *pair)
         uname, uname_len, password, password_len,
         cand_use, controlling, priority,
         agent->tie_breaker,
+        pair->foundation,
         agent_to_ice_compatibility (agent));
 
     nice_debug ("Agent %p: conncheck created %d - %p", agent, buffer_len, pair->stun_message.buffer);
@@ -1766,8 +1770,9 @@ static gboolean priv_schedule_triggered_check (NiceAgent *agent, Stream *stream,
 	   *       aggressive nomination mode, send a new triggered
 	   *       check to nominate the pair */
 	  if ((agent->compatibility == NICE_COMPATIBILITY_RFC5245 ||
-                  agent->compatibility == NICE_COMPATIBILITY_WLM2009) &&
-              agent->controlling_mode)
+         agent->compatibility == NICE_COMPATIBILITY_WLM2009 ||
+         agent->compatibility == NICE_COMPATIBILITY_OC2007R2) &&
+        agent->controlling_mode)
 	    priv_conn_check_initiate (agent, p);
 	}
 
diff --git a/stun/stunmessage.h b/stun/stunmessage.h
index b9291b2..f92afac 100644
--- a/stun/stunmessage.h
+++ b/stun/stunmessage.h
@@ -218,6 +218,8 @@ typedef enum
  * defined by ICE draft 19
  * @STUN_ATTRIBUTE_ICE_CONTROLLING: The ICE-CONTROLLING optional attribute as
  * defined by ICE draft 19
+ * @STUN_ATTRIBUTE_CANDIDATE_IDENTIFIER: The CANDIDATE-IDENTIFIER optional
+ * attribute as defined by [MS-ICE2]
  *
  * Known STUN attribute types as defined by various RFCs and drafts
  */
@@ -288,7 +290,9 @@ typedef enum
   STUN_ATTRIBUTE_FINGERPRINT=0x8028,    /* RFC5389 */
   STUN_ATTRIBUTE_ICE_CONTROLLED=0x8029,    /* ICE-19 */
   STUN_ATTRIBUTE_ICE_CONTROLLING=0x802A,    /* ICE-19 */
-  /* 0x802B-0xFFFF */      /* reserved */
+  /* 0x802B-0x8053 */      /* reserved */
+  STUN_ATTRIBUTE_CANDIDATE_IDENTIFIER=0x8054    /* MS-ICE2 */
+  /* 0x8055-0xFFFF */      /* reserved */
 } StunAttribute;
 
 
diff --git a/stun/usages/ice.c b/stun/usages/ice.c
index e469f32..d73beee 100644
--- a/stun/usages/ice.c
+++ b/stun/usages/ice.c
@@ -42,6 +42,7 @@
 
 #include <string.h>
 #include <assert.h>
+#include <stdlib.h>
 
 #ifdef _WIN32
 #include <winsock2.h>
@@ -64,13 +65,15 @@ stun_usage_ice_conncheck_create (StunAgent *agent, StunMessage *msg,
     const uint8_t *username, const size_t username_len,
     const uint8_t *password, const size_t password_len,
     bool cand_use, bool controlling, uint32_t priority,
-    uint64_t tie, StunUsageIceCompatibility compatibility)
+    uint64_t tie, const char *candidate_identifier,
+    StunUsageIceCompatibility compatibility)
 {
   StunMessageReturn val;
 
   stun_agent_init_request (agent, msg, buffer, buffer_len, STUN_BINDING);
 
-  if (compatibility == STUN_USAGE_ICE_COMPATIBILITY_RFC5245) {
+  if (compatibility == STUN_USAGE_ICE_COMPATIBILITY_RFC5245 ||
+      compatibility == STUN_USAGE_ICE_COMPATIBILITY_WLM2009) {
     if (cand_use)
     {
       val = stun_message_append_flag (msg, STUN_ATTRIBUTE_USE_CANDIDATE);
@@ -97,6 +100,28 @@ stun_usage_ice_conncheck_create (StunAgent *agent, StunMessage *msg,
       return 0;
   }
 
+  if (compatibility == STUN_USAGE_ICE_COMPATIBILITY_WLM2009) {
+    size_t identifier_len = strlen(candidate_identifier);
+    size_t buffer_len = identifier_len;
+    int modulo4 = identifier_len % 4;
+    uint8_t* buf;
+
+    if (modulo4)
+        buffer_len += 4 - modulo4;
+
+    buf = malloc(buffer_len);
+    memset(buf, 0, buffer_len);
+    memcpy(buf, candidate_identifier, identifier_len);
+
+    val = stun_message_append_bytes (msg, STUN_ATTRIBUTE_CANDIDATE_IDENTIFIER,
+            buf, buffer_len);
+
+    free(buf);
+
+    if (val != STUN_MESSAGE_RETURN_SUCCESS)
+		return 0;
+  }
+
   return stun_agent_finish_message (agent, msg, password, password_len);
 
 }
diff --git a/stun/usages/ice.h b/stun/usages/ice.h
index 39bafaa..556c18d 100644
--- a/stun/usages/ice.h
+++ b/stun/usages/ice.h
@@ -65,6 +65,8 @@ extern "C" {
  * implementation of ICE
  * @STUN_USAGE_ICE_COMPATIBILITY_MSN: The ICE compatibility with MSN's
  * implementation of ICE
+ * @STUN_USAGE_ICE_COMPATIBILITY_WLM2009: The ICE compatibility with Windows
+ * Live Messenger and Microsoft Office Communicator 2007 R2 implementation of ICE
  * @STUN_USAGE_ICE_COMPATIBILITY_DRAFT19: The ICE compatibility with draft 19
  *
  * This enum defines which compatibility modes this ICE usage can use
@@ -78,6 +80,7 @@ typedef enum {
   STUN_USAGE_ICE_COMPATIBILITY_RFC5245,
   STUN_USAGE_ICE_COMPATIBILITY_GOOGLE,
   STUN_USAGE_ICE_COMPATIBILITY_MSN,
+  STUN_USAGE_ICE_COMPATIBILITY_WLM2009,
   STUN_USAGE_ICE_COMPATIBILITY_DRAFT19 = STUN_USAGE_ICE_COMPATIBILITY_RFC5245,
 } StunUsageIceCompatibility;
 
@@ -130,12 +133,16 @@ typedef enum {
  * @priority: The value of the PRIORITY attribute
  * @tie: The value of the tie-breaker to put in the ICE-CONTROLLED or
  * ICE-CONTROLLING attribute
+ * @candidate_identifier: The foundation value to put in the
+ * CANDIDATE-IDENTIFIER attribute
  * @compatibility: The compatibility mode to use for building the conncheck
  * request
  *
  * Builds an ICE connectivity check STUN message.
  * If the compatibility is not #STUN_USAGE_ICE_COMPATIBILITY_RFC5245, the
  * @cand_use, @controlling, @priority and @tie arguments are not used.
+ * If the compatibility is not #STUN_USAGE_ICE_COMPATIBILITY_WLM2009, the
+ * @candidate_identifier argument is not used.
  * Returns: The length of the message built.
  */
 size_t
@@ -144,7 +151,8 @@ stun_usage_ice_conncheck_create (StunAgent *agent, StunMessage *msg,
     const uint8_t *username, const size_t username_len,
     const uint8_t *password, const size_t password_len,
     bool cand_use, bool controlling, uint32_t priority,
-    uint64_t tie, StunUsageIceCompatibility compatibility);
+    uint64_t tie, const char *candidate_identifier,
+    StunUsageIceCompatibility compatibility);
 
 
 /**
-- 
1.7.1

