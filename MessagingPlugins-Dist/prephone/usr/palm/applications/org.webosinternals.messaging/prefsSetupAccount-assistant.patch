--- prefsSetupAccount-assistant.js	Fri Aug 28 12:51:10 2009
+++ prefsSetupAccount-assistant.js.new	Sat Oct 31 16:47:30 2009
@@ -16,8 +16,49 @@
 		this.handlePasswordKeyUp = this.handlePasswordKeyUp.bindAsEventListener(this);
 		this.removeAccount = this.removeAccount.bindAsEventListener(this);
 		this.confirmRemoveAccount = this.confirmRemoveAccount.bindAsEventListener(this);
+
+		this.tattr = {
+  			trueLabel:  'true' ,
+ 			falseLabel:  'false'
+  		}
+		this.tModel = {
+			value : false,
+ 			disabled: false
+		}
     },
 
+    getServerSettings: function(data){
+	
+      this.params.server = data.ServerName;
+      this.params.port = data.ServerPort;
+      this.params.tls = data.ServerTLS;   
+
+      //Update Fields
+      this.serverModel.original = data.ServerName;
+      this.controller.modelChanged(this.serverModel);
+
+      this.portModel.original = data.ServerPort;
+      this.controller.modelChanged(this.portModel);
+
+      if (data.ServerTLS == "false")
+	{
+	      this.tModel.value = false;
+	      this.controller.modelChanged(this.tModel);
+	}
+      else
+	{
+	      this.tModel.value = true;
+	      this.controller.modelChanged(this.tModel);
+	}
+
+	if (this.Messaging.transports.getTransportByName(this.params.domain).className == "sipe"){
+		this.params.login = data.ServerLogin;
+		this.serverLoginModel.original = data.ServerLogin;
+      		this.controller.modelChanged(this.serverLoginModel);
+	}
+
+    },
+
     setup: function(){
         this.accountId;
         this.createAccountRequest;
@@ -64,11 +105,47 @@
 				this.imLinksElement = this.controller.get('im-links');
 				this.imLinksElement.observe(Mojo.Event.tap, this.handleExtraContentTap);
 			}
+
+			// Special case for Server Defined Plugins - add extra content below password field
+			if ((this.Messaging.transports.getTransportByName(this.params.domain).className == "sipe") || (this.Messaging.transports.getTransportByName(this.params.domain).className == "jabber")  || (this.Messaging.transports.getTransportByName(this.params.domain).className == "sametime")  || (this.Messaging.transports.getTransportByName(this.params.domain).className == "gwim")) {
+				var ServerDetails = Mojo.View.render({object:{}, template:"prefsSetupAccount/ServerDetails"});				
+				this.controller.get('ServerDetails').update(ServerDetails);
+
+				//Add extra login field for Office Communicator
+				if (this.Messaging.transports.getTransportByName(this.params.domain).className == "sipe"){
+					var LoginDetails = Mojo.View.render({object:{}, template:"prefsSetupAccount/OfficeCommunicator"});				
+					this.controller.get('LoginDetails').update(LoginDetails);
+				}
+
+				this.controller.setupWidget('TLSToggle', this.tattr,this.tModel );
+				this.TLSToggleChanged = this.TLSToggleChanged.bindAsEventListener(this);
+				Mojo.Event.listen(this.controller.get('TLSToggle'),Mojo.Event.propertyChange,this.TLSToggleChanged);
+
+				//Load Server Details
+				MessagingMojoService.loadserver(this.controller,this.Messaging.transports.getTransportByName(this.params.domain).className); 
+				MessagingMojoService.getserver(this.getServerSettings.bind(this),this.controller,this.Messaging.transports.getTransportByName(this.params.domain).className);
+			}
 		} else {
 			this.controller.get('prefHeaderText').update($L('Add an account'));
 			this.saveAccountFn = this.saveAccount.bind(this);
+
+			// Special case for Server Defined Plugins - add extra content below password field
+			if ((this.Messaging.transports.getTransportByName(this.params.domain).className == "sipe") || (this.Messaging.transports.getTransportByName(this.params.domain).className == "jabber") || (this.Messaging.transports.getTransportByName(this.params.domain).className == "sametime") || (this.Messaging.transports.getTransportByName(this.params.domain).className == "gwim")) {
+				var ServerDetails = Mojo.View.render({object:{}, template:"prefsSetupAccount/ServerDetails"});				
+				this.controller.get('ServerDetails').update(ServerDetails);
+
+				//Add extra login field for Office Communicator
+				if (this.Messaging.transports.getTransportByName(this.params.domain).className == "sipe"){
+					var LoginDetails = Mojo.View.render({object:{}, template:"prefsSetupAccount/OfficeCommunicator"});				
+					this.controller.get('LoginDetails').update(LoginDetails);
+				}
+
+				this.controller.setupWidget('TLSToggle', this.tattr,this.tModel );
+				this.TLSToggleChanged = this.TLSToggleChanged.bindAsEventListener(this);
+				Mojo.Event.listen(this.controller.get('TLSToggle'),Mojo.Event.propertyChange,this.TLSToggleChanged);
+			}
 		}
-		
+	
         var usernameAttributes = {
             textFieldName: "username",
             hintText: '',
@@ -106,6 +183,49 @@
 		}
         this.controller.setupWidget('password', passwordAttributes, this.passwordModel);		
 
+        var serverAttributes = {
+            textFieldName: "server",
+            hintText: '',
+            modelProperty: 'original',
+            multiline: false,
+            focus: false,
+			textReplacement: false
+        };
+        this.serverModel = {
+            original: this.params.server || '',
+			disabled: false
+        };
+        this.controller.setupWidget('server', serverAttributes, this.serverModel);
+
+	if (this.Messaging.transports.getTransportByName(this.params.domain).className == "sipe"){
+		var serverLoginAttributes = {
+	            textFieldName: "login",
+	            hintText: '',
+	            modelProperty: 'original',
+	            multiline: false,
+	            focus: false,
+				textReplacement: false
+	        };
+	        this.serverLoginModel = {
+	            original: this.params.login || '',
+				disabled: false
+	        };
+	        this.controller.setupWidget('login', serverLoginAttributes, this.serverLoginModel);
+	 }
+        var portAttributes = {
+            textFieldName: "port",
+            hintText: '',
+            modelProperty: 'original',
+            multiline: false,
+            focus: false,
+			textReplacement: false
+        };
+        this.portModel = {
+            original: this.params.port || '',
+			disabled: false
+        };
+        this.controller.setupWidget('port', portAttributes, this.portModel);
+        
 		this.saveButton = this.controller.get('saveAccountButton');
 		var saveButtonAttributes = {
 			disabledProperty: 'disabled',
@@ -128,7 +248,16 @@
 			this.passwordElement.observe(Mojo.Event.tap, this.passwordTapHandler);
 		}
 	},
-	
+
+    TLSToggleChanged: function(event) {
+	//	this.controller.showAlertDialog({
+	//	    onChoose: function(value) {},
+	//	    title:"The toggle value changed",
+	//	    message:"Toggle value is now: " + event.value,
+	//	    choices:[ {label:'OK', value:'OK', type:'color'} ]
+	//    });
+	},
+
 	handlePasswordKeyUp: function(event) {
 		// If enter is pressed then simulate tapping on "Sign In"
 		if (event && Mojo.Char.isEnterKey(event.keyCode)) {
@@ -159,6 +288,12 @@
 		if (this.imLinksElement && this.handleExtraContentTap) {
 			this.imLinksElement.stopObserving(Mojo.Event.tap, this.handleExtraContentTap);
 		}
+		
+		// Special case for Server Defined Plugins
+		if ((this.Messaging.transports.getTransportByName(this.params.domain).className == "sipe") || (this.Messaging.transports.getTransportByName(this.params.domain).className == "jabber") || (this.Messaging.transports.getTransportByName(this.params.domain).className == "sametime") || (this.Messaging.transports.getTransportByName(this.params.domain).className == "gwim"))
+		{
+			Mojo.Event.stopListening(this.controller.get('TLSToggle'),Mojo.Event.propertyChange,this.TLSToggleChanged);
+		}
 	},
 	
 	clearDummyPassword: function(event) {
@@ -185,24 +320,53 @@
 		statusMessageWrapper.show();
 		hasEmptyField = true;
 	  } else if(!accountDetails.password) {
-	  	statusMessageElement.update($L('Please enter a password'));
-		statusMessageWrapper.show();
-		hasEmptyField = true;
-	  } else {
-	  	statusMessageElement.update('');
-		statusMessageWrapper.hide();
-	  }
+        statusMessageElement.update($L('Please enter a password'));
+        statusMessageWrapper.show();
+        hasEmptyField = true;
+	  } else if((this.Messaging.transports.getTransportByName(this.params.domain).className == "sipe") || (this.Messaging.transports.getTransportByName(this.params.domain).className == "jabber") || (this.Messaging.transports.getTransportByName(this.params.domain).className == "sametime") || (this.Messaging.transports.getTransportByName(this.params.domain).className == "gwim")) {
+		    if(this.Messaging.transports.getTransportByName(this.params.domain).className != "sipe"){
+				if(!accountDetails.port) {
+					statusMessageElement.update($L('Please enter a port'));
+					statusMessageWrapper.show();
+					hasEmptyField = true;
+				}
+			    if(!accountDetails.server) {
+		  	        statusMessageElement.update($L('Please enter a server'));
+			        statusMessageWrapper.show();
+			        hasEmptyField = true;
+			    }
+		    }
+	  } 
 	  
 	  if(hasEmptyField) {
 	  	this.stopLoginSpinner();
 		return;
 	  }
+	  else {
+	  	statusMessageElement.update('');
+		statusMessageWrapper.hide();
+	  }
 	  
       accountDetails.accountTypeId = this.params.accountTypeId;
       accountDetails.domain = this.params.domain;
 
 	  this.startLoginSpinner();
+	  
+	  //Create normal account
       this.createAccountRequest = MessagingMojoService.createIMAccount(this.controller, accountDetails,this.accountSaved.bind(this),this.createLoginFailed.bind(this));
+      
+      //Add new server, port and TLS details
+      if((this.Messaging.transports.getTransportByName(this.params.domain).className == "sipe") || (this.Messaging.transports.getTransportByName(this.params.domain).className == "jabber") || (this.Messaging.transports.getTransportByName(this.params.domain).className == "sametime") || (this.Messaging.transports.getTransportByName(this.params.domain).className == "gwim")) {
+            //setserver: function(sceneController,serviceName,ServerName,ServerPort,TLS)
+
+	     if (this.Messaging.transports.getTransportByName(this.params.domain).className == "sipe"){
+	            MessagingMojoService.setserver(this.controller, this.Messaging.transports.getTransportByName(this.params.domain).className,accountDetails.server,accountDetails.port,this.tModel.value,accountDetails.login);
+	     }
+	     else
+	     {
+		     MessagingMojoService.setserver(this.controller, this.Messaging.transports.getTransportByName(this.params.domain).className,accountDetails.server,accountDetails.port,this.tModel.value,'');
+	     }
+      }
     },
 	
 	accountSaved : function(result){
@@ -244,11 +408,22 @@
 	 * UPDATE ACCOUNT METHODS
 	 */
     updateAccount : function(){
-	  if (this.passwordModel.original === PrefsSetupAccountAssistant.kDummyPassword) {
-	  	Mojo.Log.info("updateAccount doing noop b/c password hasn't changed");
-		this.popScene();
-	  	return;
+
+	  if((this.Messaging.transports.getTransportByName(this.params.domain).className == "sipe") || (this.Messaging.transports.getTransportByName(this.params.domain).className == "jabber") || (this.Messaging.transports.getTransportByName(this.params.domain).className == "sametime") || (this.Messaging.transports.getTransportByName(this.params.domain).className == "gwim")) {
+		  if (this.passwordModel.original === PrefsSetupAccountAssistant.kDummyPassword && this.serverModel.original === this.params.server && this.portModel.original === this.params.port && this.tModel.value === this.params.tls) {
+		  	Mojo.Log.info("updateAccount doing noop b/c password hasn't changed");
+			this.popScene();
+		  	return;
+		  }
 	  }
+	  else
+	  {
+		  if (this.passwordModel.original === PrefsSetupAccountAssistant.kDummyPassword) {
+		  	Mojo.Log.info("updateAccount doing noop b/c password hasn't changed");
+			this.popScene();
+		  	return;
+		  }
+	  }
 	  var accountDetails = Mojo.View.serializeMojo(this.controller.get('AccountSetupForm'), true);
 	  var statusMessageElement = this.controller.get('StatusMessage');
 	  var statusMessageWrapper = this.controller.get('StatusMessageWrapper');
@@ -261,19 +436,46 @@
 	  	statusMessageElement.update($L('Please enter a password'));
 		statusMessageWrapper.show();
 		hasEmptyField = true;
-	  } else {
-	  	statusMessageElement.update('');
-	    statusMessageWrapper.hide();
-	  }	  
+	  } else if((this.Messaging.transports.getTransportByName(this.params.domain).className == "sipe") || (this.Messaging.transports.getTransportByName(this.params.domain).className == "jabber") || (this.Messaging.transports.getTransportByName(this.params.domain).className == "sametime") || (this.Messaging.transports.getTransportByName(this.params.domain).className == "gwim")) {
+		if(this.Messaging.transports.getTransportByName(this.params.domain).className != "sipe"){
+				if(!accountDetails.port) {
+					statusMessageElement.update($L('Please enter a port'));
+					statusMessageWrapper.show();
+					hasEmptyField = true;
+				}
+			    if(!accountDetails.server) {
+		  	        statusMessageElement.update($L('Please enter a server'));
+			        statusMessageWrapper.show();
+			        hasEmptyField = true;
+			    }
+		    }
+
+	  }  
 	  
 	  if(hasEmptyField) {
 	  	this.stopLoginSpinner();
 		return;
 	  }
+	  else {
+	  	statusMessageElement.update('');
+	    statusMessageWrapper.hide();
+	  }	 
 	  
 	  this.startLoginSpinner();
       this.accountId = this.params.id;
       this.updateAccountRequest = MessagingMojoService.updateAccountPassword(this.controller, this.params.id,accountDetails.password,this.accountUpdated.bind(this),this.updateLoginFailed.bind(this));
+      
+      //Update server, port and TLS details
+      if((this.Messaging.transports.getTransportByName(this.params.domain).className == "sipe") || (this.Messaging.transports.getTransportByName(this.params.domain).className == "jabber") || (this.Messaging.transports.getTransportByName(this.params.domain).className == "sametime") || (this.Messaging.transports.getTransportByName(this.params.domain).className == "gwim")) {
+            //setserver: function(sceneController,serviceName,ServerName,ServerPort,TLS)
+	     if (this.Messaging.transports.getTransportByName(this.params.domain).className == "sipe"){
+	            MessagingMojoService.setserver(this.controller, this.Messaging.transports.getTransportByName(this.params.domain).className,accountDetails.server,accountDetails.port,this.tModel.value,accountDetails.login);
+	     }
+	     else
+	     {
+		     MessagingMojoService.setserver(this.controller, this.Messaging.transports.getTransportByName(this.params.domain).className,accountDetails.server,accountDetails.port,this.tModel.value,'');
+	     }
+      }
     },
 	
     accountUpdated : function(result) {
@@ -340,7 +542,16 @@
 		this.saveButtonModel.disabled = false;
 		this.controller.modelChanged(this.saveButtonModel);	  
 		this.passwordModel.disabled = false;
-		this.controller.modelChanged(this.passwordModel);	 	
+		this.controller.modelChanged(this.passwordModel);	
+		this.serverModel.disabled = false;
+		this.controller.modelChanged(this.serverModel);
+		this.portModel.disabled = false;
+		this.controller.modelChanged(this.portModel); 	
+
+		if (this.Messaging.transports.getTransportByName(this.params.domain).className == "sipe"){
+			this.serverLoginModel.disabled = false;
+			this.controller.modelChanged(this.serverLoginModel);
+		}
 		
 		// the username field is always disabled in edit mode
 		// the delete account button is only visible in edit mode
@@ -358,7 +569,16 @@
 		this.controller.modelChanged(this.saveButtonModel);
 		this.passwordModel.disabled = true;
 		this.controller.modelChanged(this.passwordModel);	 
+		this.serverModel.disabled = true;
+		this.controller.modelChanged(this.serverModel);
+		this.portModel.disabled = true;
+		this.controller.modelChanged(this.portModel); 
 
+		if (this.Messaging.transports.getTransportByName(this.params.domain).className == "sipe"){
+			this.serverLoginModel.disabled = true;
+			this.controller.modelChanged(this.serverLoginModel);
+		}
+
 		// the username field is always disabled in edit mode
 		// the delete account button is only visible in edit mode
 		if (this.params.editMode) {
@@ -391,7 +611,13 @@
 	
 	removeAccount: function() {
 		this.startRemoveSpinner();
-        MessagingMojoService.removeAccount(this.controller, this.params.id,this.handleRemoveAccountSuccess.bind(this));        
+        MessagingMojoService.removeAccount(this.controller, this.params.id,this.handleRemoveAccountSuccess.bind(this));
+        
+        //Remove server, port and TLS config
+        if((this.Messaging.transports.getTransportByName(this.params.domain).className == "sipe") || (this.Messaging.transports.getTransportByName(this.params.domain).className == "jabber") || (this.Messaging.transports.getTransportByName(this.params.domain).className == "sametime") || (this.Messaging.transports.getTransportByName(this.params.domain).className == "gwim")) {
+            //clearserver: function(sceneController,serviceName)
+            MessagingMojoService.clearserver(this.controller, this.Messaging.transports.getTransportByName(this.params.domain).className);
+        }
 	},	
 	
 	handleRemoveAccountSuccess: function() {
