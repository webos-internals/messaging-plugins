--- prefsAccountSummary-assistant.js	Fri Oct 23 13:55:59 2009
+++ prefsAccountSummary-assistant.new	Mon Jan 18 14:11:24 2010
@@ -13,6 +13,13 @@
 		this.notificationSoundToggleChanged = this.notificationSoundToggleChanged.bindAsEventListener(this);
 		this.chooseNotificationRingtone = this.chooseNotificationRingtone.bindAsEventListener(this);
 		this.autoDownloadToggleChanged = this.autoDownloadToggleChanged.bindAsEventListener(this);
+
+		this.availabilities = [
+			{label: $L('Sign On'), command:'Login', secondaryIcon:'status-available'},
+			{label: $L('Sign Off'),  command:'Logoff',   secondaryIcon:'status-offline'},
+			{label: $L('R/W Contacts'),  command:'RWContacts'},
+			{label: $L('Configure Account'),  command:'ConfigAccount'}
+		];
     },
  
     setup: function(){
@@ -35,8 +42,33 @@
       this.controller.listen('addAccountButton',Mojo.Event.tap, this.handleAddAccountTap);   
    
       this.controller.listen('currentringtonerow',Mojo.Event.tap, this.chooseNotificationRingtone);
+	  
+	  //Password Dialog
+	  this.controller.setupWidget('password', this.passwordAttributes, this.passwordAttributesmodel);
     },
 	
+	//Password Dialog
+	passwordAttributes: {
+		textReplacement: false,
+		maxLength: 64,
+		focus: true,
+		acceptBack: true,
+		hintText: 'Enter Password...',
+		changeOnKeyPress: true,
+	},
+	
+	passwordAttributesmodel: {
+		value : '',
+	},
+	
+	//Show password dialog
+	ShowPasswordDialog: function(e,serviceName,username,id) {
+		this.controller.showDialog({
+			template: 'prefsAccountSummary/passwordDialog',
+			assistant: new PasswordDialogAssistant(this,serviceName,username,id)
+		});
+	},
+	
 	cleanup: function() {
 		this.controller.stopListening('preferences-accounts',Mojo.Event.listTap, this.handleAccountListTap);
 		this.controller.stopListening('addAccountButton',Mojo.Event.tap, this.handleAddAccountTap);
@@ -49,8 +81,71 @@
 	},
 
 	handleAccountListTap: function(e) {
-		MessagingUtils.simpleListClick(this.controller.get(e.originalEvent.target),"accountRow",this.editAccount.bind(this),false);   
+		this.controller.popupSubmenu({
+			onChoose: this.handleAvailabilitySelection.bind(this,e),
+			placeNear: e.target,
+			items: this.availabilities
+		});
 	},
+
+	handleAvailabilitySelection: function(accountitem, selectedValue) {
+		if (selectedValue == undefined) 
+			return;
+
+		//Configure Account?
+		if (selectedValue == "ConfigAccount")
+		{
+			MessagingUtils.simpleListClick(this.controller.get(accountitem.originalEvent.target),"accountRow",this.editAccount.bind(this),false);   
+			return;
+		}
+		
+		//Get Target Row
+		var targetRow = this.controller.get(accountitem.originalEvent.target);
+		if (!targetRow.hasClassName('accountRow')) {
+		  targetRow = targetRow.up('.accountRow');
+		}
+		
+		//Setup variables
+		var serviceName;
+		var username;
+		var id;
+		
+		targetRow.select('input').each(function(input){
+			if (input.name == 'domain')
+			{
+				serviceName = input.value;
+			}
+			if (input.name == 'username')
+			{
+				username = input.value;
+			}
+			if (input.name == 'id')
+			{
+				id = input.value;
+			}
+		  });
+		
+		//Login?
+		if (selectedValue == "Login")
+		{
+			//Show password dialog
+			this.ShowPasswordDialog(this,serviceName,username,id);
+		}
+		
+		//Logoff?
+		if (selectedValue == "Logoff")
+		{
+			MessagingMojoService.AccountLogOut (this.controller,id)
+			return;
+		}
+		
+		//Make Contacts Read Write?
+		if (selectedValue == "RWContacts")
+		{
+			MessagingMojoService.EnableContactsReadWrite (this.controller,serviceName)
+			return;
+		}
+	},
 	
 	handleAddAccountTap: function() {
 		this.controller.stageController.pushScene('prefsAccountTypeList', this.params);
@@ -342,4 +437,112 @@
       Object.extend(newParams,inputHash);
       this.controller.stageController.pushScene('prefsSetupAccount',newParams);
     }
+});
+
+var PasswordDialogAssistant = Class.create({
+	
+	initialize: function(sceneAssistant,serviceName,username,id) {
+		this.sceneAssistant = sceneAssistant;
+		this.controller = sceneAssistant.controller;
+		this.serviceName = serviceName;
+		this.username = username;
+		this.accountID = id;
+		this.connectiontype;
+		this.connectionIP;
+	},
+	
+	setup : function(widget) {
+		this.widget = widget;
+		this.controller.get('login_button').addEventListener(Mojo.Event.tap, this.loginclick.bindAsEventListener(this));
+		this.controller.get('cancel_button').addEventListener(Mojo.Event.tap, this.cancelclick.bindAsEventListener(this));
+		this.controller.document.addEventListener("keydown", this.handlePasswordKeyDown.bind(this),true);
+		
+		//Get Connection Data
+		MessagingMojoService.getconnection(this.controller, this.ConnectionData.bind(this));
+	},
+	
+	ConnectionData: function(data) {
+		this.ConnectionDataModel = data;
+	},
+	
+	loginclick: function() {
+		//Did we get connection data?
+		if (this.ConnectionDataModel != null)
+		{
+			Mojo.Log.info("ConnectionDataModel: Available");
+
+			//Are we connected to the internet?
+			if (this.ConnectionDataModel.isInternetConnectionAvailable == true)
+			{
+				Mojo.Log.info("Internet Connection: Available");
+				
+				//Are we WiFi connected? If so we prefer this
+				if (this.ConnectionDataModel.wifi.state == "connected")
+				{
+					this.connectiontype = "wifi";
+					this.connectionIP = this.ConnectionDataModel.wifi.ipAddress;
+				}
+				else
+				{
+					//WiFi not available. Is WAN?
+					if (this.ConnectionDataModel.wan.state == "connected")
+					{
+						this.connectiontype = "wan";
+						this.connectionIP = this.ConnectionDataModel.wan.ipAddress;
+					}
+				}
+			}
+			else
+			{
+				Mojo.Log.info("Internet Connection: Unavailable");
+			}
+		}
+		else
+		{
+			Mojo.Log.info("ConnectionDataModel: Unavailable");
+		}
+
+		Mojo.Log.info("Connection Type: " + this.connectiontype);
+		Mojo.Log.info("Connection IP: " + this.connectionIP);
+		
+		if (this.connectiontype != null && this.connectionIP != null)
+		{
+			Mojo.Log.info("Logging in...");
+			
+			//Login
+			this.controller.serviceRequest('palm://com.palm.messaging', {
+				method: 'loginToAccount',
+				parameters: {serviceName: this.serviceName, username: this.username, password: this.sceneAssistant.passwordAttributesmodel.value ,connectionType: this.connectiontype ,ipAddress: this.connectionIP ,accountId: this.accountID}
+			});
+		}
+		else
+		{
+			Mojo.Log.info("Unable to login. No IP or connection type returned.");
+		}
+	
+		//Remove password from dialog
+		this.sceneAssistant.passwordAttributesmodel.value = '';
+		
+		//Close dialog
+		this.widget.mojo.close();
+	},
+	
+	handlePasswordKeyDown: function(event) {
+		// If enter is pressed then simulate tapping on "Sign In"
+		if (event && Mojo.Char.isEnterKey(event.keyCode)) {
+			if(this.sceneAssistant.passwordAttributesmodel.value != '')
+			{
+				this.loginclick();
+				Event.stop(event);
+			}
+		}
+	},
+	
+	cancelclick: function() {
+		//Remove password from dialog
+		this.sceneAssistant.passwordAttributesmodel.value = '';
+		
+		//Close dialog
+		this.widget.mojo.close();
+	}
 });
\ No newline at end of file
