--- prefsAccountSummary-assistant.js	Fri Jul  2 22:11:54 2010
+++ prefsAccountSummary-assistant.new	Fri Jul  2 22:54:26 2010
@@ -6,6 +6,7 @@
         this.Messaging = this.appController.Messaging;      
         this.params = params || {}
         this.requests = [];
+		this.params.BadCertSetting = "";
 		
 		this.handleAccountListTap = this.handleAccountListTap.bindAsEventListener(this);
 		this.handleAddAccountTap = this.handleAddAccountTap.bindAsEventListener(this);
@@ -13,10 +14,29 @@
 		this.notificationSoundToggleChanged = this.notificationSoundToggleChanged.bindAsEventListener(this);
 		this.chooseNotificationRingtone = this.chooseNotificationRingtone.bindAsEventListener(this);
 		this.autoDownloadToggleChanged = this.autoDownloadToggleChanged.bindAsEventListener(this);
+		this.BadCertToggleChanged = this.BadCertToggleChanged.bindAsEventListener(this);
+
+		this.availabilities = [
+			{label: $L('Available'), command:'Available', secondaryIcon:'status-available'},
+			{label: $L('Busy'), command:'Busy', secondaryIcon:'status-busy'},
+			{label: $L('Sign Off'),  command:'Logoff',   secondaryIcon:'status-offline'},
+			{label: $L('R/W Contacts'),  command:'RWContacts'},
+			{label: $L('Configure Account'),  command:'ConfigAccount'},
+			{label: $L('Remove Account'),  command:'RemoveAccount'}
+		];
+		
+		this.badcertcattr = {
+	  		trueLabel:  'true' ,
+	 		falseLabel:  'false'
+	  	}
+		this.badcertModel = {
+			value : false,
+	 		disabled: false
+		}
     },
  
     setup: function(){
-		//get notification repeat interval and max repeat values from cookie
+	//get notification repeat interval and max repeat values from cookie
 		this.notificationCookie = new Mojo.Model.Cookie("com.palm.app.messaging.notificationrepeat");
 
 		if (this.notificationCookie) 
@@ -68,16 +88,60 @@
       this.controller.listen('addAccountButton',Mojo.Event.tap, this.handleAddAccountTap);   
    
       this.controller.listen('currentringtonerow',Mojo.Event.tap, this.chooseNotificationRingtone);
-	  
+	  	  
 		//repeat notification handlers
 		this.notificationRepeatIntervalClickHandler = this.handleNotificationRepeatIntervalClick.bindAsEventListener(this);
 		this.controller.get('pv_notification_repeat_interval').observe('mojo-tap', this.notificationRepeatIntervalClickHandler);
 		this.notificationMaxRepeatClickHandler = this.handleNotificationMaxRepeatClick.bindAsEventListener(this);
 		this.controller.get('pv_notification_max_repeat').observe('mojo-tap', this.notificationMaxRepeatClickHandler);
+		
+	  //Password Dialog
+	  this.controller.setupWidget('password', this.passwordAttributes, this.passwordAttributesmodel);
+	  
+	  //Bad Cert Setting
+      this.controller.setupWidget('BadCertToggle', this.badcertcattr, this.badcertModel);
+	  MessagingMojoService.getbadcertsetting(this.getBadCertSetting.bind(this),this.controller);
     },
 	
+    getBadCertSetting: function(data){
+		this.params.BadCertSetting = data.Setting;
+
+		if (data.Setting == "Accept")
+		{
+			  this.badcertModel.value = true;
+			  this.controller.modelChanged(this.badcertModel);
+		}
+		  else
+		{
+			  this.badcertModel.value = false;
+			  this.controller.modelChanged(this.badcertModel);
+		}
+    },
+	
+	//Password Dialog
+	passwordAttributes: {
+		textReplacement: false,
+		maxLength: 64,
+		focus: true,
+		acceptBack: true,
+		hintText: 'Enter Password...',
+		changeOnKeyPress: true,
+	},
+	
+	passwordAttributesmodel: {
+		value : '',
+	},
+	
+	//Show password dialog
+	ShowPasswordDialog: function(e,serviceName,username,id) {
+		this.controller.showDialog({
+			template: 'prefsAccountSummary/passwordDialog',
+			assistant: new PasswordDialogAssistant(this,serviceName,username,id)
+		});
+	},
+	
 	cleanup: function() {
-		
+	
 		//save notification repeat preferences
 		if (this.notificationCookie)
 		{
@@ -96,16 +160,161 @@
       this.controller.stopListening('notificationSoundSelector',Mojo.Event.propertyChange,this.notificationSoundToggleChanged);		
       this.controller.stopListening('autoDownloadToggle',Mojo.Event.propertyChange,this.autoDownloadToggleChanged);
 	  
-		//stop observing notification repeat controls
+	  //stop observing notification repeat controls
 		this.controller.get('pv_notification_repeat_interval').stopObserving('mojo-tap', this.notificationRepeatIntervalClickHandler);
 		this.notificationRepeatIntervalClickHandler = undefined;
 		this.controller.get('pv_notification_max_repeat').stopObserving('mojo-tap', this.notificationMaxRepeatClickHandler);
 		this.notificationMaxRepeatClickHandler = undefined;
+		
+	  this.controller.stopListening('BadCertSelector',Mojo.Event.propertyChange,this.BadCertToggleChanged);	
 	},
 
 	handleAccountListTap: function(e) {
-		MessagingUtils.simpleListClick(this.controller.get(e.originalEvent.target),"accountRow",this.editAccount.bind(this),false);   
+		this.controller.popupSubmenu({
+			onChoose: this.handleAvailabilitySelection.bind(this,e),
+			placeNear: e.target,
+			toggleCmd: this.getAvailability(e),
+			items: this.availabilities
+		});
 	},
+
+	getAvailability: function(accountitem){
+		//Get Target Row
+		var targetRow = this.controller.get(accountitem.originalEvent.target);
+		if (!targetRow.hasClassName('accountRow')) {
+		  targetRow = targetRow.up('.accountRow');
+		}
+		
+		//Setup variable
+		var Availability;
+		
+		targetRow.select('input').each(function(input){
+			if (input.name == 'Availability')
+			{
+				Availability = input.value;
+			}
+		  });
+		if (Availability == '')
+		{
+			Availability = "Logoff";
+		}
+		return Availability;
+	},
+
+	handleAvailabilitySelection: function(accountitem, selectedValue) {
+		if (selectedValue == undefined) 
+			return;
+
+		//Configure Account?
+		if (selectedValue == "ConfigAccount")
+		{
+			MessagingUtils.simpleListClick(this.controller.get(accountitem.originalEvent.target),"accountRow",this.editAccount.bind(this),false);   
+			return;
+		}
+		
+		//Get Target Row
+		var targetRow = this.controller.get(accountitem.originalEvent.target);
+		if (!targetRow.hasClassName('accountRow')) {
+		  targetRow = targetRow.up('.accountRow');
+		}
+		
+		//Setup variables
+		var serviceName;
+		var username;
+		var id;
+		var Availability;
+		
+		targetRow.select('input').each(function(input){
+			if (input.name == 'domain')
+			{
+				serviceName = input.value;
+			}
+			if (input.name == 'username')
+			{
+				username = input.value;
+			}
+			if (input.name == 'id')
+			{
+				id = input.value;
+			}
+			if (input.name == 'Availability')
+			{
+				Availability = input.value;
+			}
+		  });
+		
+		//Login?
+		if (selectedValue == "Available")
+		{
+			//If we are busy set to available
+			if (Availability == 'Busy')
+			{
+				MessagingMojoService.setstatus (this.controller,serviceName,username,'0')
+			}
+			else
+			{
+				//Show password dialog (to login)
+				this.ShowPasswordDialog(this,serviceName,username,id, 'Available');
+			}
+		       // make the service call that will populate this list
+		       MessagingMojoService.getstatus(this.renderAvailability.bind(this),serviceName,username)
+		}
+				
+		//Logoff?
+		if (selectedValue == "Logoff")
+		{
+			MessagingMojoService.AccountLogOut (this.controller,id)
+		       // make the service call that will populate this list
+		       MessagingMojoService.getstatus(this.renderAvailability.bind(this),serviceName,username)
+			return;
+		}
+
+		//Busy?
+		if (selectedValue == "Busy")
+		{
+			if (Availability == 'Available')
+			{
+				MessagingMojoService.setstatus (this.controller,serviceName,username,'2')
+			       // make the service call that will populate this list
+		       	MessagingMojoService.getstatus(this.renderAvailability.bind(this),serviceName,username)
+				return;
+			}
+			else
+			{
+				//Show password dialog (to login)
+				this.ShowPasswordDialog(this,serviceName,username,id, 'Busy');
+			}
+		}
+
+		//Remove?
+		if (selectedValue == "RemoveAccount")
+		{
+			this.controller.showAlertDialog({
+				onChoose: function(removeAccount) {
+					if(removeAccount) {
+						MessagingMojoService.removeAccount(this.controller, id,'');
+						return;
+					} else {
+						return;
+					}
+				}.bind(this),
+				title: $L("Remove account"),
+				message: $L("Are you sure you want to remove this instant messaging account and all associated data from your device?"),
+				preventCancel: true,
+				choices: [
+					{label: $L("Remove account"), value: true, type: 'negative'},
+					{label: $L("Keep account"), value: false, type: 'color'}
+				]
+			});
+		}
+		
+		//Make Contacts Read Write?
+		if (selectedValue == "RWContacts")
+		{
+			MessagingMojoService.EnableContactsReadWrite (this.controller,serviceName)
+			return;
+		}
+	},
 	
 	handleAddAccountTap: function() {
 		this.controller.stageController.pushScene('prefsAccountTypeList', this.params);
@@ -306,6 +515,7 @@
 		}
 	  }
       this.controller.listen('autoDownloadToggle',Mojo.Event.propertyChange,this.autoDownloadToggleChanged);
+	  this.controller.listen('BadCertToggle',Mojo.Event.propertyChange,this.BadCertToggleChanged);
     },
 	
 	notificationToggleChanged: function(event) {
@@ -365,6 +575,16 @@
 	    Mojo.FilePicker.pickFile(params,this.controller.stageController);
 		//this.handleRingtoneSelect.bind(this, {"fullPath": "/media/internal/ringtones/Discreet.mp3", "name": "Discreet"}).delay(1);
 	},
+	
+	BadCertToggleChanged: function(event) {
+       	if(event.value == true)
+		{
+			MessagingMojoService.AcceptBadCert(this.controller);
+		} else
+		{
+			MessagingMojoService.RejectBadCert(this.controller);
+		}    		
+	},
 
 	handleRingtoneSelect: function(file) {
 		Mojo.Log.info("handleRingtoneSelect %j", file);
@@ -375,18 +595,45 @@
 		MessagingMojoService.setNotificationPreferences(this.controller, params);
 		this.controller.get('currentringtone').update(file.name);
 	},
-	
     renderAccountsList: function(data){   
       var that = this;  
       data.list.each(function(item){
 	  	var transport = that.Messaging.transports.getTransportByName(item.domain);
         item.serviceIcon = transport.largeIcon;    
 		item.accountDisplayName = transport.displayName;
-      });      
+
+      // make the service call that will populate this list
+      MessagingMojoService.getstatus(that.renderAvailability.bind(that),item.domain,item.username)
+      });
       
       this.preferencesAccountsModel.items = data.list;
-      this.controller.modelChanged(this.preferencesAccountsModel, this);     
+      this.controller.modelChanged(this.preferencesAccountsModel, this);
     },
+    renderAvailability: function(data){
+	this.preferencesAccountsModel.items.each(function(listitem){
+		if (listitem.domain == data.serviceName)
+			{
+				listitem.serviceIconAvailability = 'images/status-offline-dark.png';
+				listitem.Availability = 'Logoff';
+				//Available
+				if (data.status == "2")
+				{
+				       listitem.serviceIconAvailability = 'images/status-available-dark.png';
+					listitem.Availability = 'Available';
+				}
+				//Busy
+				if (data.status == "5")
+				{
+				       listitem.serviceIconAvailability = 'images/status-busy-dark.png';
+					listitem.Availability = 'Busy';
+				}
+			}
+	});
+
+      this.preferencesAccountsModel.items = this.preferencesAccountsModel.items;
+      this.controller.modelChanged(this.preferencesAccountsModel, this);
+
+    },
     editAccount: function(targetRow){
       // iterate through hidden inputs
       var inputHash = {};
@@ -513,4 +760,92 @@
 		{label:$L('95'), command:'95'},
 		{label:$L('100'), command:'100'}
 	]
+});
+
+var PasswordDialogAssistant = Class.create({
+	
+	initialize: function(sceneAssistant,serviceName,username,id,status) {
+		this.sceneAssistant = sceneAssistant;
+		this.controller = sceneAssistant.controller;
+		this.serviceName = serviceName;
+		this.username = username;
+		this.accountID = id;
+		this.status = status
+	},
+	
+	setup : function(widget) {
+		this.widget = widget;
+		this.controller.get('login_button').addEventListener(Mojo.Event.tap, this.loginclick.bindAsEventListener(this));
+		this.controller.get('cancel_button').addEventListener(Mojo.Event.tap, this.cancelclick.bindAsEventListener(this));
+	},
+	
+	loginclick: function() {	
+		Mojo.Log.info("Logging in...");
+			
+		//Login
+		if (this.sceneAssistant.passwordAttributesmodel.value != '' || this.serviceName == "irc")
+		{
+			if (this.status == 'Available')
+			{
+				this.updateAccountRequest = MessagingMojoService.updateAccountPassword(this.controller, this.accountID,this.sceneAssistant.passwordAttributesmodel.value,this.accountUpdated.bind(this),this.updateLoginFailed.bind(this));
+			}
+			else
+			{
+				this.updateAccountRequest = MessagingMojoService.updateAccountPassword(this.controller, this.accountID,this.sceneAssistant.passwordAttributesmodel.value,this.accountUpdatedBusy.bind(this),this.updateLoginFailed.bind(this));
+			}
+
+			//Remove password from dialog
+			this.sceneAssistant.passwordAttributesmodel.value = '';
+		
+			//Close dialog
+			this.widget.mojo.close();
+		}
+		else
+		{
+			//Close dialog
+			this.widget.mojo.close();
+		}
+	},
+		
+	cancelclick: function() {
+		//Remove password from dialog
+		this.sceneAssistant.passwordAttributesmodel.value = '';
+		
+		//Close dialog
+		this.widget.mojo.close();
+	},
+
+	accountUpdated : function(result) {
+		// do nothing when we encounter a pending status.  If returnValue = true is found, this means
+		// that the user is currently logged in and we have just saved their new credentials.
+		if ((result.status && result.status == "successful") || result.returnValue) {
+			if (this.updateAccountRequest) {
+				this.controller.cancelServiceRequest(this.updateAccountRequest);
+			}
+			// set the last availability selection to online
+			MessagingMojoService.setLastAvailabilitySelection(this.controller, 0);
+		}
+	},
+
+	accountUpdatedBusy : function(result) {
+		// do nothing when we encounter a pending status.  If returnValue = true is found, this means
+		// that the user is currently logged in and we have just saved their new credentials.
+		if ((result.status && result.status == "successful") || result.returnValue) {
+			if (this.updateAccountRequest) {
+				this.controller.cancelServiceRequest(this.updateAccountRequest);
+			}
+			// set the last availability selection to online
+			MessagingMojoService.setLastAvailabilitySelection(this.controller, 0);
+
+			//Set to Busy
+			MessagingMojoService.setstatus (this.controller,this.serviceName,this.username,'2')
+		      	// make the service call that will populate this list
+	       	MessagingMojoService.getstatus(this.sceneAssistant.renderAvailability.bind(this.sceneAssistant),this.serviceName,this.username)
+		}
+	},
+    
+	updateLoginFailed : function(result){
+		if(this.updateAccountRequest)
+			this.controller.cancelServiceRequest(this.updateAccountRequest);		 
+	}
 });
\ No newline at end of file
